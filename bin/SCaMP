#!/usr/bin/env bash

## Set up your environment here...this may involve loading
# an envrionment module, or setting your PATH/PERL5LIB according
# to where software components are installed
module load anaconda2/personal
# export PATH=/path/to/perl:${PATH}
# export PERL5LIB=/path/to/perllibs:${PERL5LIB}

#### NO CHANGES NECESSARY PAST THIS POINT #####

function usage {
  echo 
  echo SCaMP: SCalable Metagenomics Pipeline
  echo usage: $0 -r run_stage [-s]
  echo
  echo Configured stages: ${run_scripts[@]}
  echo
  exit 1
}

# Need to be running bash v4 with support for associative arrays...
bash_ver=$(echo $BASH_VERSION|awk -F. '{print $1}')
if (( "${bash_ver}" < 4 )); then
  echo "Bash version >4 required...you have $BASH_VERSION"
  exit 1
fi

# Can't use relative paths to locate components of the system
# under a batch system since $0 will be a spool directory...
DIR="$( cd "$( dirname "$0" )" ; pwd  -P)"
export SCAMP_ROOT="${DIR}/.."
export PERL5LIB="${DIR}/../lib"

declare -a run_scripts=(qc_trim)
declare -A in_dirs=(["qc_trim"]="reads")
declare -A out_dirs=(["qc_trim"]="trimmed")

while getopts "r:s" opt; do
  case $opt in
    r)
      run_stage=${OPTARG}
      for script in "${run_scripts[@]}"; do
        if [ ${script} == ${run_stage} ]; then
          in_dir=${in_dirs[$script]}
          out_dir=${out_dirs[$script]}
        fi
      done 
      echo
      echo running ${OPTARG}
      echo
      ;;
    s) 
      echo "Data will be staged to local storage"
      stage=1
      ;;
    \?) 
      echo "Invalid option: ${opt}"
      usage
      ;;
    esac
done

if [ -z "${run_stage}" ]; then
  usage
fi

#poor mans YAML parser...
work_dir=$(grep ^work_dir: ${SCAMP_ROOT}/etc/SCaMP.yaml|awk -F: '{print $2}'|sed 's/ //g')
scratch_dir=$(grep ^scratch_dir: ${SCAMP_ROOT}/etc/SCaMP.yaml|awk -F: '{print $2}'|sed 's/ //g')

if [ ! -d ${work_dir} ]; then
  mkdir -p ${work_dir}
fi

if [ ! -d ${scratch_dir} ]; then
  mkdir -p ${scratch_dir}
fi

if [ ! -d ${work_dir}/${out_dir} ]; then
  mkdir -p ${work_dir}/${out_dir}
fi

samples=$(($(ls -1 ${work_dir}/reads/*gz|wc -l)/2))
echo "Found ${samples} samples"

if [[ ! -z $SGE_ROOT ]]; then
  echo "SGE queuing system found..."
  qsub -t 1-${samples} -v PERL5LIB ${SCAMP_ROOT}/bin/${run_stage}
else  
  have_pbs=$(qsub --version 2>&1|grep ^pbs_version)
  if [[ ! -z "${have_pbs}" ]]; then
    echo "PBS queuing system found..."
    qsub -J 1-${samples} -N "SCaMP:${run_stage}" ${SCAMP_ROOT}/bin/${run_stage}
  else 
    echo "No supported queuing system found..."
    exit 1
  fi
  
fi
