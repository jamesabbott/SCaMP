#!/usr/bin/perl

######################################################################
#
# $HeadURL$
# $Author$
# $Revision$
# $Date$
#
######################################################################

use warnings;
use strict;

use Pod::Usage;
use Getopt::Long;
use Carp qw(croak);

=pod

=head1 NAME

    go_2_csv

=head1 SYNOPSIS

    go_2_csv --go /path/to/.obo_file --out /path/to/out/file

=head1 DESCRIPTION

    Generates csv files from basic go obo file for database loading

=head1 REQUIRED ARGUMENTS

=over 4

=item B<go>: Path to .obo format go basic file

=item B<out>: Path to output file

=back

=head1 AUTHOR - James Abbott

Email j.abbott@imperial.ac.uk

=cut

{

    my ( $go, $out, $help, $man );

    GetOptions(
                'go=s'  => \$go,
                'out=s' => \$out,
                'man'   => \$man,
                'help'  => \$help,
              );

    croak "\nUnknown argument: @ARGV" if "@ARGV";
    pod2usage( verbose => 2 ) if ($man);
    pod2usage( verbose => 1 ) if ( $help || !$go || !$out );

    open GO,  $go     or die "Error opening $go: $!";
    open OUT, ">$out" or die "Error opening $out: $!";
    my %go;
    while ( my $line = <GO> ) {
        if ( $line eq "[Term]\n"||$line eq "[Typedef]\n" ) {
            if ( exists( $go{'id'} ) ) {
                print OUT $go{'id'}, ",", $go{'namespace'}, ",", $go{'name'}, ",", $go{'obsolete'},",",$go{'def'}, "\n";
            }
            %go = ();
	$go{'obsolete'}=0;
		exit if ($line eq "[Typedef]\n");

        }
        else {
            if ( $line ne "\n" ) {
                my ( $key, $value ) = split( /: /, $line );
                chomp $value if ($value);
			$value=~s/,/\\\,/g;
			$value=~s/"//g;
		if ( $key =~ /^def/) {
			$value=~s/\[.+\]$//;
			if ($value=~/OBSOLETE/) {
				$go{'obsolete'} = 1;
				$value=~s/OBSOLETE.//;
			}
		}
                if ( $key =~ /^id|^name|^def/ ) {
                    $go{$key} = $value;
                }
            }
        }
    }
    close GO;
    close OUT;
}
