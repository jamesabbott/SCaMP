#!/usr/bin/perl

######################################################################
#
# $HeadURL$
# $Author$
# $Revision$
# $Date$
#
# Script for running kraken - assumes database is preloaded in /ramdisk
#
######################################################################

=head1 NAME

    kraken_classify

=head1 SYNOPSIS

    kraken_classify --out_dir /path/to/output_dir --in_dir /path_to_input_dir 

=head1 DESCRIPTION

    Wrapper for running Kraken against each sample in a dataset. Required kraken db to be first copied to /ramkdisk/kraken_db,
    
=head1 REQUIRED ARGUMENTS

=over 4

=item B<in_dir>: Path to directory of input data. This should contains one subdirectory-per-sample, containing the read-pairs as compressed fastq files

=item B<out_dir>: Path to write output files 

=back

=head1 OPTIONAL ARGUMENTS

=over 4

=item B<help>: Display help text

=item B<man>: Display manual page

=back

=head1 AUTHOR - James Abbott

Email j.abbott@imperial.ac.uk

=cut

use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;
use File::Copy;
use File::Path qw(remove_tree);
use Carp qw(croak);
use Cwd;

{
    print "Arguments are @ARGV\n";

    my ( $in_dir, $out_dir, $help, $man );
    my $db = "/ramdisk/kraken_db";
    GetOptions(
                'in_dir=s'  => \$in_dir,
                'out_dir=s' => \$out_dir,
                'help'      => \$help,
                'man'       => \$man,
              );

    croak "\nUnknown argument: @ARGV" if "@ARGV";
    pod2usage( verbose => 2 ) if ($man);
    pod2usage( verbose => 1 ) if ( $help || !$in_dir || !$out_dir );

    croak "Input directory $in_dir does not exist!" if ( !-d $in_dir );

    opendir DIR, $in_dir or die "Error opening $in_dir:$!";
    my @samples = grep !/\.\.?\z|stdout/, readdir DIR;
    close DIR;

    my $orig_dir = cwd;

    foreach my $sample (@samples) {
        print "\nSample $sample will be classified with Kraken...\n";

        # get the filenames of the paired fastq files
        opendir SAMPLE, "$in_dir/$sample/" or die "Could not open $in_dir/$sample: $!";
        my $pair1 = ( grep ( /_1.fq.gz/, readdir SAMPLE ) )[0];
        rewinddir SAMPLE;
        my $pair2 = ( grep ( /_2.fq.gz/, readdir SAMPLE ) )[0];
        close SAMPLE;

        mkdir '/local_scratch/florinash/'
          or die "Could not create /local_scratch/florinash: $!"
          unless ( -d '/local_scratch/florinash' );
        my $errors;
        my $scratch_dir = "/local_scratch/florinash/$sample";
        if ( -d $scratch_dir ) {
            print "\nRemoving old scratch directory: $scratch_dir...\n";
            remove_tree( $scratch_dir, { error => \$errors } );
            if (@$errors) {
                print "Errors occurred removing $scratch_dir: \n\n";
                foreach my $error (@$errors) {
                    print "$error\n";
                }
            }
        }
        mkdir $scratch_dir or die "mkdir failed: $!";
        chdir $scratch_dir or die "chdir failed: $!";

        copy( "$in_dir/$sample/$pair1", "$scratch_dir/$pair1" ) or die "error copying $pair1: $!";
        copy( "$in_dir/$sample/$pair2", "$scratch_dir/$pair2" ) or die "error copying $pair2: $!";

        my $cmd =
"/usr/biosoft/packages/kraken/current/kraken --db $db --paired --fastq-input --gzip-compressed --threads 8 --output $scratch_dir/$sample.out $scratch_dir/$pair1 $scratch_dir/$pair2";
        system("$cmd") == 0 or croak "Error running $cmd; $!";

        mkdir "$out_dir" or die $! if ( !-d "$out_dir" );
        copy( "$scratch_dir/$sample.out", "$out_dir/$sample.out" )
          or croak "Error copying $scratch_dir/$sample.out: $!";

        chdir $orig_dir or die "Error changing to $orig_dir:$!";

        remove_tree( $scratch_dir, { error => \$errors } );
        if (@$errors) {
            print "Errors occurred removing $scratch_dir: \n\n";
            foreach my $error (@$errors) {
                print "$error\n";
            }
        }
    }

}

