#!/usr/bin/env perl

# Directives for SGE queuing systems
#$ -j y
#$ -cwd
#$ -pe smp 8
#$ -R y
#$ -l h_rt=04:00:00,h_vmem=2G

# Directives for PBS queueing systems
#PBS -l select=1:ncpus=2:mem=16gb
#PBS -l walltime=04:00:00
#PBS -q med-bio
#PBS -j oe
#PBS -V

=pod

=head1 NAME 

qc_trim

=head1 SYNOPSIS 

qc_trim [--qual 20] [--length 50]

=head1 DESCRIPTION                                         

qc_trim carried out initial quality and adapter trimming of sequence reads,
using trim_galore.

Gzip compressed sequence reads should be placed in a 'reads' subdirectory of
the work_dir defined in SCaMP.yaml. 

Read files should be named according to the following scheme:

sample_barcode_xxxxx_R1.[fastq|fq].gz

i.e. SP-128_CATGGC_L005_R1.fastq.gz

Characters up to the first '_' will be taken as the sample name. If the reads
are from a barcoded library and specific adapter sequences are provided
for each barcode using the '--adapters' argument, then a series of [ACTG]
characters up to the next '_' will be interpreted as the barcode for the
sample. The read within each file should be indicated with either the R1 or R2
tag in the file suffix i.e R1.fastq.gz or R1.fq.gz.

By default, a quality threshold of 20 is used, along with a minimum read length
to retain of 50 bases. N's at the end of reqds are also removed.

trim_galore will automatically search for Illumina universal and  Nextera
transposase adapters.
    
=head1 OPTIONAL ARGUMENTS                                  

=over                                                      

=item B<qual>: Set quality threshold (default: 20)

Bases with a quality score below this value will be trimmed from the end of
sequences

=item B<length>: Seq minimum read length (default: 50)

Reads shorter than this value will be discarded following quality and adapter
trimming

=item B<adapters>: Path to tab-delimited file of bar-coded adapter sequences to
remove

A tab-delimited file can be specified containing specific adapter sequences for
individual barcodes. This should be formatted as:

=item B<stage>: Flag to indicate input data should be staged to local storage

barcode	adapter1    adapter2

See documentation for full examples

=item B<help>: Display help text                           

=item B<man>: Display manual page                          

=back                                                      

=head1 AUTHOR - James Abbott                               

Email j.abbott@imperial.ac.uk                              

=cut                                                       

use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;
use Carp qw(croak);
use FindBin;
use File::Find::Rule;
use File::Basename;
use File::Copy qw(copy move);
use File::Copy::Recursive qw(dirmove);
use File::Path qw(make_path);

# add lib dir to @INC for cmd line use
# Jobs submitted via SCaMP script should have environment set
use lib "$FindBin::Bin/../lib";
use SCaMP;

my $scamp_root;
if ( $ENV{'SCAMP_ROOT'} ) {
    $scamp_root = $ENV{'SCAMP_ROOT'};
}
else {
    $scamp_root = "$FindBin::Bin/..";
}

{

    my ( $help, $man, $stage, $adapters );

    # default thresholds for quality score and min read length...
    my $qual   = 20;
    my $length = 50;

    GetOptions(
                'qual:i'     => \$qual,
                'length:i'   => \$length,
                'adapters:s' => \$adapters,
                'stage'      => \$stage,
                'help'       => \$help,
                'man'        => \$man,
              );

    croak "\nUnknown argument: @ARGV" if "@ARGV";
    pod2usage( verbose => 2 ) if ($man);
    pod2usage( verbose => 1 ) if ($help);

    $stage=$ENV{'SCAMP_DATA_STAGE'} if (exists ($ENV{'SCAMP_DATA_STAGE'}));

    my $SCaMP       = SCaMP->new( 'scamp_root' => $scamp_root );
    my $job         = $SCaMP->get_job_id();
    my $task        = $SCaMP->get_task_id();
    my $work_dir    = $SCaMP->get_work_dir();
    my $scratch_dir = $SCaMP->get_scratch_dir;

    my $read_dir = $work_dir . "/reads";
    my $out_dir  = $work_dir . "/trimmed/";
    my $log      = $work_dir . "/logs/qc_trim.${job}.${task}.out";

    my $adapter_seqs = read_adapters($adapters) if ($adapters);

    die "${work_dir}/reads does not exist" unless ( -d "${work_dir}/reads" );

    print "Hostname = " . $ENV{'HOSTNAME'} . "\n";
    print "Task = $task\n";

    my %samples;
    my @files = File::Find::Rule->file()->name( "*.fastq.gz", "*.fq.gz" )->in($read_dir);
    foreach my $file (@files) {

        #filename should be named sample_(optional_barcode)_optionsl_otherstuff_R[12].f(ast)q.gz
        if ( $file =~ /\/([A-Za-z0-9\-]+)([\w]*?).f(ast)?q.gz$/ ) {
            $samples{$1}++;
        }
        else {
            croak "Error parsing filename: $file...\nPlease check your filenaming meets the required format"
              unless ($1);
        }
    }

    my @samples = sort( keys(%samples) );
    my $sample  = $samples[ $task - 1 ];

    print "Sample = $sample\n";

    # Allow for rerunning incomplete jobs only by skipping samples whose output directories exist...
    # Since this only appears with the final dirmove of the script, this should be pretty reliable...
    if ( !-d "$out_dir/$sample" ) {
        my @job_files = grep /$sample/, @files;

        my $read1 = basename( ( grep /R1.f(ast)?q.gz/, @job_files )[0] );
        my $read2 = basename( ( grep /R2.f(ast)?q.gz/, @job_files )[0] );

        my $barcode = $1 if ( $read1 =~ /${sample}_([ACTG]*)/ );

        print "barcode = $barcode\n" if ($barcode);
        print "\nread1 = $read1\nread2 = $read2\n";

        my ( $adapter1, $adapter2 );
        if ($barcode) {
            $adapter1 = $adapter_seqs->{$barcode}->[0];
            $adapter2 = $adapter_seqs->{$barcode}->[1];
            if ($adapter1) {
                print "adapter1 = $adapter1\nadapter2 = $adapter2\n";
            }
            else {
                print "\nWARNING: Barcode identified in read name but no adapters sequences provided\n";
            }
        }

        my ( $data_dir, $scratch_dir ) =
          $SCaMP->setup_paths(
                               'stage'     => $stage,
                               'sample'    => $sample,
                               'src_dir'   => $read_dir,
                               'work_dir'  => $work_dir,
                               'job_files' => \@job_files
                             );
        chdir $scratch_dir or croak "Error changing to $scratch_dir: $!\n";

        #TODO: provide option for passing adapter1 and adapter2 directly
        #if ( !defined($adapter1) ) {
        #    $adapter1 = 'GATCGGAAGAGCACACGTCTGAACTCCAGTCAC' . $barcode . 'ATCTCGTATGCCGTCTTCTGCTTG';
        #}

        my $cmd = "trim_galore --fastqc -q $qual --length $length";
        $cmd .= " -a $adapter1 -a2 $adapter2" if ($adapter1);
        $cmd .= " --trim-n --gzip --paired $data_dir/$read1 $data_dir/$read2";
        $cmd .= " > ${log} 2>&1";
        system($cmd) == 0 or die "Error running $cmd:$!";

        chdir ".." or die "Error chdiring: $!";
        dirmove( $scratch_dir, "$out_dir/$sample" ) or die "Error moving results: $!";
    }
    else {
        print "\nNot running job: output already exists...\n";
    }

}

######################################################################
#
# read_adapters
#
# Reads barcodes and adapter sequences from specified file
#
# Required arguments: $ (path to adapter file)
#
# Returns: ($) Hashref to adapters
#
######################################################################

sub read_adapters {

    my $adapters = shift;

    my %adapters;
    open ADAPTERS, $adapters or croak "Could not open $adapters: $!";

    while ( my @fields = split( /\t/, <ADAPTERS> ) ) {
        next if ( $fields[0] =~ /^#/ );
        chomp $fields[2];
        $adapters{ $fields[0] } = [ $fields[1], $fields[2] ];
    }

    close ADAPTERS;

    return ( \%adapters );

}

