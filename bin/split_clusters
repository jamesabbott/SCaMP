#!//bin/env perl

######################################################################
#
# $HeadURL$
# $Author$
# $Revision$
# $Date$
#
######################################################################

use warnings;
use strict;

$|++;

use Getopt::Long;
use Pod::Usage;
use Carp qw(croak);
use Bio::SeqIO;

=pod

=head1 NAME

    split_clusters

=head1 SYNOPSIS

    split_clusters --in /path/to/centroids.fa --out /path/to/outdir --chunk 10000

=head1 DESCRIPTION

    The output of clustering gene predictions is a multi-fasta file containing (probably) millions of sequences, but for downstream analysis need to be in smaller sets. The number of sequences to be included in each output file can be defined using the '--chunk' argument. If the input centroid file is named 'xxxx.cluster.centroids.fa' or 'xxxx.singleton.centroids.fa', the type will be parsed from the input filename and included in output filenames.

=head1 REQUIRED ARGUMENTS

=over 4

=item B<in>: Path to multi-fastafile of gene predictions. 

=item B<out>: Path to write output 

=item B<chunk>: Number of sequences per chunk

=back

=back

=head1 AUTHOR - James Abbott

Email j.abbott@imperial.ac.uk

=cut

{
    my ( $in, $out_dir, $chunk, $help, $man );
    GetOptions( 'in=s'      => \$in,
                'out_dir=s' => \$out_dir,
		'chunk=s'   => \$chunk,
	 );

    croak "\nUnknown argument: @ARGV" if "@ARGV";
    pod2usage( verbose => 2 ) if ($man);
    pod2usage( verbose => 1 ) if ( $help || !$in || !$out_dir || !$chunk );

    mkdir $out_dir or croak "Error creating $out_dir: $!" if ( !-d $out_dir );
    my $file_num  = 0;
    my $seq_max   = $chunk;
    my $seq_count = 0;
    my $outIO;

	my $type = $1 if ( $in=~/(cluster|singleton).centroids.fa/); 
	$type =  'split' if ($type eq "");

    ( $file_num, $outIO ) = new_file( $out_dir, $type, $file_num );
    my $inIO = Bio::SeqIO->new( -file => $in, -format => 'fasta' );
    while ( my $seq = $inIO->next_seq() ) {
        $outIO->write_seq($seq);
        $seq_count++;
        if ( $seq_count == $seq_max ) {
            ( $file_num, $outIO ) = new_file( $out_dir, $type, $file_num );
            $seq_count = 0;
        }
    }
}

sub new_file {

    my $out_dir  = shift;
	my $type = shift;
    my $file_num = shift;

    print "Opening $out_dir/$type.$file_num.fa...\n";
    my $outIO = Bio::SeqIO->new( -file => ">$out_dir/$type.$file_num.fa", -format => 'fasta' );

    return ( ++$file_num, $outIO );
}
